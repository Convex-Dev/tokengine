# -----------------------------------------------------------------------------
# File {{ template_dest }} for {{ ansible_hostname }} ({{ansible_host }})
# *** {{ ansible_managed }} ***
# Generated by {{ role_name }} role from template {{ template_path | basename }}
# at {{ template_run_date }} on {{ template_host }}
# -----------------------------------------------------------------------------
#
# NOTE: for sub-domains, need to specify the root domain also...
#
# DOMAIN BASEURLS (sorted alphabetically)
#
{% if domain_urls is defined %}
#
{% for key, value in domain_urls.items() | sort %}
# {{ key }}
{% if value.caddy_dest is defined %}
{% if value.nohttps is defined %} http://{{ value.url }} {
# HTTPS certs & HTTP->HTTPS redirect disabled for {{ key }}
{% else %}
{{ value.url }} {
{% endif %}
    {% if value.offline is defined -%}
        header Content-Type text/html
        respond <<HTML
          <html>
          <head>
          <meta charset="utf-8">
          <title>{{ value.url }}</title>
          <style>
            body {
              font-family: sans-serif;
            }
            h2 {
              color: rgb(256, 128, 64);
            }
          </style>
          </head>
          <body>
            <h2>{{ value.url }}</h2>
            <hr>
            <p><strong>Site is offline for maintenance. Please try again later.</strong></p>
            <hr>
            <em>({{ ansible_hostname }})</em>
          </body>
        </html>
        HTML 200
    {% else -%}
        # {{ value.url }} caddy_dest: {{ value.caddy_dest }}
        reverse_proxy {{ value.caddy_dest }} {
            {% if value.caddy_x_fwd is defined -%}
            header_up X-Forwarded-For {remote}
            {% endif -%}
        }
    {% endif -%}
    log {
        output file {{ caddy_logdir }}/{{ value.url }}.log
        format console
        # level (default INFO)
    } 
}
{% else %}
# ( no caddy_dest specified for {{ key }})
#
{%- endif %}
# -------------------------------------------
{% endfor %}
#
{% endif %}

# ===========================================
# SUB-DOMAIN URLS (sorted alphabetically)
#
#
{% if site_urls is defined %}
#
{% for key, value in site_urls.items() | sort %}
# {{ key }}
{% if value.caddy_dest is defined %}
{% if value.nohttps is defined %} http://{{ value.url }} {
# HTTPS certs & HTTP->HTTPS redirect disabled for {{ key }}
{% else %}
{{ value.url }} {
{% endif %}
    {% if value.offline is defined -%}
        header Content-Type text/html
        respond <<HTML
          <html>
          <head>
          <meta charset="utf-8">
          <title>{{ value.url }}</title>
          <style>
            body {
              font-family: sans-serif;
            }
            h2 {
              color: rgb(256, 128, 64);
            }
          </style>
          </head>
          <body>
            <h2>{{ value.url }}</h2>
            <hr>
            <p><strong>Site is offline for maintenance. Please try again later.</strong></p>
            <hr>
            <em>({{ ansible_hostname }})</em>
          </body>
        </html>
        HTML 200
    {% else -%}
    # {{ value.url }} caddy_dest: {{ value.caddy_dest }}
        reverse_proxy {{ value.caddy_dest }} {
            {% if value.caddy_x_fwd is defined -%}
            header_up X-Forwarded-For {remote}
           {% endif -%}
            header_up X-ASH-Caddy-Rule-ID {{ key }}
        }
        {% if value.proxy_backend is defined %}
        # {{ value.url }} haproxy_backend: {{ value.proxy_backend }}
        {% else %}
        # {{ value.url }} haproxy_backend: none
        {% endif -%}
    {% endif -%}
    log {
        output file {{ caddy_logdir }}/{{ value.url }}.log
        format console
        # level (default INFO)
    } 
}
{% else %}
# ( no caddy_dest specified for {{ key }})
#
{% endif %}
# -------------------------------------------
{% endfor %}
#
{% endif %}
#``
# Default handler if all url matches fail
http:// {
  respond "URL match failed!" 400
}
# ===========================================
##

